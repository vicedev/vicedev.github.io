<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>view.post为啥可以拿到view的宽高</title>
    <url>/2020/03/03/view-post%E4%B8%BA%E5%95%A5%E5%8F%AF%E4%BB%A5%E6%8B%BF%E5%88%B0view%E7%9A%84%E5%AE%BD%E9%AB%98/</url>
    <content><![CDATA[<p>我们都知道可以通过View去post一个Runnable对象，在其中就可以通过getWidth和getHeight获取到View的宽高，那么为什么呢？</p>
<a id="more"></a> 

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="comment">//View#post</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">post</span><span class="params">(Runnable action)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">final</span> AttachInfo attachInfo = mAttachInfo;</span><br><span class="line">       <span class="keyword">if</span> (attachInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> attachInfo.mHandler.post(action);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Postpone the runnable until we know on which thread it needs to run.</span></span><br><span class="line">       <span class="comment">// Assume that the runnable will be successfully placed after attach.</span></span><br><span class="line">       getRunQueue().post(action);</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>这边判断了attachInfo对象是否为空，不为空时通过attachInfo.mHandler去post该Runnable，为空时则调用getRunQueue()去post该Runnable，我们先看看getRunQueue().post方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> HandlerActionQueue <span class="title">getRunQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mRunQueue == <span class="keyword">null</span>) &#123;</span><br><span class="line">        mRunQueue = <span class="keyword">new</span> HandlerActionQueue();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mRunQueue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="comment">//HandlerActionQueue</span></span><br><span class="line">   <span class="keyword">private</span> HandlerAction[] mActions;</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">post</span><span class="params">(Runnable action)</span> </span>&#123;</span><br><span class="line">       postDelayed(action, <span class="number">0</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postDelayed</span><span class="params">(Runnable action, <span class="keyword">long</span> delayMillis)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">final</span> HandlerAction handlerAction = <span class="keyword">new</span> HandlerAction(action, delayMillis);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (mActions == <span class="keyword">null</span>) &#123;</span><br><span class="line">               mActions = <span class="keyword">new</span> HandlerAction[<span class="number">4</span>];</span><br><span class="line">           &#125;</span><br><span class="line">           mActions = GrowingArrayUtils.append(mActions, mCount, handlerAction);</span><br><span class="line">           mCount++;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>可以看到getRunQueue方法返回了一个HandlerActionQueue对象，该对象的post方法会调用到postDelayed方法，新建了一个HandlerAction对象，并执行了GrowingArrayUtils.append把handlerAction添加到数组中，然后就没了。那我们返回去看attachInfo是什么时候赋值的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="comment">//View#dispatchAttachedToWindow</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dispatchAttachedToWindow</span><span class="params">(AttachInfo info, <span class="keyword">int</span> visibility)</span> </span>&#123;</span><br><span class="line">       mAttachInfo = info;</span><br><span class="line">       ...</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>可以看到在View的dispatchAttachedToWindow中传入了AttachInfo对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="comment">//ViewRootImpl</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ViewRootImpl</span><span class="params">(Context context, Display display)</span> </span>&#123;</span><br><span class="line">   	...</span><br><span class="line">       mAttachInfo = <span class="keyword">new</span> View.AttachInfo(mWindowSession, mWindow, display, <span class="keyword">this</span>, mHandler, <span class="keyword">this</span>, context);</span><br><span class="line">       ...</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="comment">//ViewRootImpl</span></span><br><span class="line">...</span><br><span class="line">   View mView;</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">performTraversals</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">final</span> View host = mView;</span><br><span class="line">   	...</span><br><span class="line">   	host.dispatchAttachedToWindow(mAttachInfo, <span class="number">0</span>);</span><br><span class="line">       ...</span><br><span class="line">       getRunQueue().executeActions(mAttachInfo.mHandler);</span><br><span class="line">   	...</span><br><span class="line">       performMeasure(childWidthMeasureSpec, childHeightMeasureSpec);</span><br><span class="line">       ...</span><br><span class="line">       performLayout(lp, mWidth, mHeight);</span><br><span class="line">       ...</span><br><span class="line">       performDraw();</span><br><span class="line">       ...</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeActions</span><span class="params">(Handler handler)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">           <span class="keyword">final</span> HandlerAction[] actions = mActions;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, count = mCount; i &lt; count; i++) &#123;</span><br><span class="line">               <span class="keyword">final</span> HandlerAction handlerAction = actions[i];</span><br><span class="line">               handler.postDelayed(handlerAction.action, handlerAction.delay);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           mActions = <span class="keyword">null</span>;</span><br><span class="line">           mCount = <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>在ViewRootImpl构造函数中创建了AttachInfo对象，并于performTraversals中调用了host.dispatchAttachedToWindow，接着调用了getRunQueue().executeActions方法，该方法中可以看到是将mActions数组中的Runnable对象用handler的postDelayed方法放入了消息队列中，这个mActions数组就是上面我们分析的在attachInfo为空的情况下会将Runnable对象添加到该数组中。再后面执行的就是我们非常熟悉的测量、布局和绘制过程，在performLayout之后就能拿到view的宽高了。虽然host.dispatchAttachedToWindow和getRunQueue().executeActions的调用都在测量之前，但是因为他们实际上都是在消息队列中加入了一个消息，所以实际执行到Runnable的时候view已经展示了出来，也就能获取到宽高了。</p>
<p><strong>拓展知识：</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">ApplicationThread#scheduleResumeActivity-&gt;ActivityThread#handleResumeActivity-&gt; Activity#makeVisible-&gt;WindowManager#addView-&gt;WindowManagerImpl#addView-&gt;WindowManagerGlobal#addView-&gt;ViewRootImpl#setView-&gt;ViewRootImpl#requestLayout-&gt;ViewRootImpl#scheduleTraversals-&gt;ViewRootImpl#performTraversals</span><br></pre></td></tr></table></figure>

<p>一些关键方法的执行顺序，视图是在Activity#onResume之后才被添加进window并开始测量布局的，所以onResume也没办法直接获取到宽高。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>源码分析</tag>
      </tags>
  </entry>
  <entry>
    <title>第一次短视频尝试</title>
    <url>/2020/01/23/%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%9F%AD%E8%A7%86%E9%A2%91%E5%B0%9D%E8%AF%95/</url>
    <content><![CDATA[<h2 id="初步想法"><a href="#初步想法" class="headerlink" title="初步想法"></a>初步想法</h2><p>过年放假在家尝试下制作短视频。其实这个想法已经酝酿很久了，短视频作为现在的风口要是能分到点汤也是很不错的哈哈。之前也有在考虑做什么内容，让我在镜头面前嘀嘀咕咕好像也挺尴尬的。平时也都有在刷“皮皮虾”，偶然看到一个号叫“程序员小刘”，发了不少技术方面的视频，比如“如何拷贝百度文库内容”、“让电脑蹦迪”啊之类的视频，真人也不用出境，解说声音也是那种电脑配音，当时他的粉丝数才几千吧，每条看的人也没多少，去查了其他各个平台的粉丝数，抖音相对较多。当然人家在我关注的大概1.2个月时间吧，皮皮虾已经有11万粉丝，抖音27.2万，其他的平台也都差不多在10万级。哎，那我是不是也可以尝试做做看做下技术方面的，大众能够使用到的一些奇淫巧技。</p>
<a id="more"></a> 

<h2 id="账号名确定"><a href="#账号名确定" class="headerlink" title="账号名确定"></a>账号名确定</h2><p>内容确定之后就想着取账号名，对于我这种选择困难症的真是艰难的过程。最后想到两个名字：”猿技“和”六号球“，”猿技”很容易理解，猿是程序员的员，技就是技术啦。”六号球“的话，6是我的幸运数字，球就是裘，其实就是“九号球”这首歌做了点更改，最后选择了“六号球”，听起来更可爱一点吧。搜索了各个视频平台有没有“六号球”这个账号，有些没有，有些有一个人，问题不大，后续再用这个名申请个公众号，如果能做大点可以往公众号导流。</p>
<h2 id="录屏软件"><a href="#录屏软件" class="headerlink" title="录屏软件"></a>录屏软件</h2><p>正常电脑的录屏直接放手机上看肯定是字都看不太清楚，所以百度了电脑上录制手机大小尺寸视频的软件，结果搜到的大部分都推荐“嗨格式录屏大师”，但是怎么看都像是水文…，下载尝试了下，直接就是试用版只能录30秒视频，这怎么能忍，作为一个程序员当然得再找找。直接google，看到知乎的一篇回答，里面推荐了一款免费开源的录屏软件“<a href="https://github.com/MathewSachin/Captura" target="_blank" rel="noopener">Captura</a>”，可指定录制的屏幕范围，真是万能的github。尝试简单录了下屏，放到手机上看，果然电脑的尺寸在手机上看是不行的。</p>
<h2 id="视频录制"><a href="#视频录制" class="headerlink" title="视频录制"></a>视频录制</h2><p>第一期选择了“如何复制百度文库内容”，其他人的方式都是使用右键打印的方式，这种方式我试了下已经行不通了，所以我换了一种代码爬取的方式。电脑进行操作录屏，声音的话打算后续再配，暂时是打算直接用原声。网上查了下适合的视频比例，也拿实际的各个平台App看了下。只有“皮皮虾”可以横过来看，其他的抖音快手啥的都只能竖屏看，所以其实最好的比例是竖屏9:16，分辨率的话可以选择“540×960”、”720×1280”、”1080×1920”，但是录制电脑视频这个竖屏的话实在是不太适合，所以最后使用的是16:9的720×1280。</p>
<h2 id="后期剪辑"><a href="#后期剪辑" class="headerlink" title="后期剪辑"></a>后期剪辑</h2><p>后期剪辑方面也是在知乎找了下手机上相关的剪辑软件，找到了别人总结的这张图</p>
<p><img src="/images/first_try_short_video/%E6%89%8B%E6%9C%BA%E8%A7%86%E9%A2%91%E5%89%AA%E8%BE%91%E8%BD%AF%E4%BB%B6.JPG" alt="手机视频剪辑软件"></p>
<p>最后只使用了下“InShot”，简单的使用，对视频的长度做了裁剪，自己配了音，加了片头和片尾，操作还算方便，可能对每句话加字幕的话会比较麻烦吧，总体还是简单易用的那种吧，可能是我要求太少了？</p>
<h2 id="上传平台"><a href="#上传平台" class="headerlink" title="上传平台"></a>上传平台</h2><p>当时完成视频剪辑已经是晚上快2点了，看着短短33秒的视频竟然莫名花了那么多时间…，先在皮皮虾做了上传，早上起来看到有几个赞和一个留言，看着都是凌晨2点多点的…后面就没在增加，所以要是放在白天投放是不是效果会好不少呢…后续也在其他平台进行了上传，有了一些发现：</p>
<ul>
<li>抖音其实是可以同步到西瓜视频和头条的，而头条里的其实就是西瓜视频。</li>
<li>火山小视频直接点录制是默认15秒的时长，最大的60秒需要长按…</li>
<li>皮皮虾、头条、西瓜视频评论区可以发图片，微视、抖音、快手评论区不能发图片</li>
</ul>
<p>然后就是除了皮皮虾其他的好像都没人点赞…，大概是我做的太无聊了吧。</p>
<h2 id="公众号注册"><a href="#公众号注册" class="headerlink" title="公众号注册"></a>公众号注册</h2><p>公众号注册地址：<a href="https://mp.weixin.qq.com/" target="_blank" rel="noopener">https://mp.weixin.qq.com/</a></p>
<p>我们个人的话就注册“订阅号”，用邮箱作为账号登录，这个邮箱需要“未注册订阅号/服务号/企业号/小程序/open帐号/个人微信号的邮箱”，所以默认自己的qq邮箱就不行啦。其余就是一些填写个人信息的工作，具体功能需要后续再去丰富。</p>
<h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>首次做视频，花了不少时间结果却没几个赞，其实落差挺大的，加上大家其实都更偏向娱乐型的视频，技术类的就更加艰难了。但是呢前有“程序员小刘”，虽然他每个视频播放量不大，但粉丝还是有不少的。坚持做做看吧，做的同时逐步去调整进步，总是有收获的。</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>短视频</tag>
      </tags>
  </entry>
  <entry>
    <title>NexT主题相关设置</title>
    <url>/2020/01/20/NexT%E4%B8%BB%E9%A2%98%E7%9B%B8%E5%85%B3%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<p>github地址：<a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">https://github.com/theme-next/hexo-theme-next</a></p>
<p>文档地址：<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">http://theme-next.iissnan.com/</a></p>
<p>“\themes\next”下的_config.yml称为主题配置文件，站点总目录下的__config.yml称为站点配置文件</p>
<a id="more"></a> 

<h2 id="选择NexT中的不同主题"><a href="#选择NexT中的不同主题" class="headerlink" title="选择NexT中的不同主题"></a>选择NexT中的不同主题</h2><p>主题配置文件中搜索“scheme”，把相应主题去除注释即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Schemes</span><br><span class="line">#scheme: Muse</span><br><span class="line">scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line">#scheme: Gemini</span><br></pre></td></tr></table></figure>

<h2 id="增加菜单栏"><a href="#增加菜单栏" class="headerlink" title="增加菜单栏"></a>增加菜单栏</h2><ol>
<li>主题配置文件中搜索“menu”，去除相应注释即可</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: &#x2F; || home</span><br><span class="line">  about: &#x2F;about&#x2F; || user</span><br><span class="line">  tags: &#x2F;tags&#x2F; || tags</span><br><span class="line">  categories: &#x2F;categories&#x2F; || th</span><br><span class="line">  archives: &#x2F;archives&#x2F; || archive</span><br><span class="line">  #schedule: &#x2F;schedule&#x2F; || calendar</span><br><span class="line">  #sitemap: &#x2F;sitemap.xml || sitemap</span><br><span class="line">  #commonweal: &#x2F;404&#x2F; || heartbeat</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>写文章时头部带上标签和分类，文章就会显示在相应menu下</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: next主题相关设置</span><br><span class="line">date: 2020-01-20 13:26:42</span><br><span class="line">tags: [标签1,标签2] #标签</span><br><span class="line">categories: 其他 #分类</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>可直接修改“\scaffolds\posts.md”，这样下次新建文章就会生成这两个</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags: </span><br><span class="line">categories:</span><br></pre></td></tr></table></figure>



<h2 id="隐藏网页底部powered-By-Hexo-强力驱动"><a href="#隐藏网页底部powered-By-Hexo-强力驱动" class="headerlink" title="隐藏网页底部powered By Hexo / 强力驱动"></a>隐藏网页底部powered By Hexo / 强力驱动</h2><p>打开 themes/next/layout/_partials/footer.swig，删除以下代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.footer.powered.enable %&#125;</span><br><span class="line">  &lt;div class="powered-by"&gt;&#123;#</span><br><span class="line">  #&#125;&#123;&#123; __('footer.powered', '&lt;a class="theme-link" target="_blank"' + nofollow + ' href="https://hexo.io"&gt;Hexo&lt;/a&gt;') &#125;&#125;&#123;% if theme.footer.powered.version %&#125; v&#123;&#123; hexo_env('version') &#125;&#125;&#123;% endif %&#125;&#123;#</span><br><span class="line">#&#125;&lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% <span class="keyword">if</span> theme.footer.powered.enable and theme.footer.theme.enable %&#125;</span><br><span class="line">  &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"post-meta-divider"</span>&gt;|<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% <span class="keyword">if</span> theme.footer.theme.enable %&#125;</span><br><span class="line">  &lt;div class="theme-info"&gt;&#123;#</span><br><span class="line">  #&#125;&#123;&#123; __('footer.theme') &#125;&#125; – &#123;#</span><br><span class="line">  #&#125;&lt;a class="theme-link" target="_blank"&#123;&#123; nofollow &#125;&#125; href="https://theme-next.org"&gt;&#123;#</span><br><span class="line">    #&#125;NexT.&#123;&#123; theme.scheme &#125;&#125;&#123;#</span><br><span class="line">  #&#125;&lt;/a&gt;&#123;% if theme.footer.theme.version %&#125; v&#123;&#123; version &#125;&#125;&#123;% endif %&#125;&#123;#</span><br><span class="line">#&#125;&lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<h2 id="浏览页面显示当前进度"><a href="#浏览页面显示当前进度" class="headerlink" title="浏览页面显示当前进度"></a>浏览页面显示当前进度</h2><p>打开 <code>themes/next/_config.yml</code>，搜索关键字 <code>scrollpercent</code>，把 <code>false</code> 改为 <code>true</code></p>
<h2 id="Local-Search本地搜索"><a href="#Local-Search本地搜索" class="headerlink" title="Local Search本地搜索"></a>Local Search本地搜索</h2><ol>
<li>站点根目录下执行以下命令</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>站点配置文件中新增以下内容到任意位置</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>编辑主题配置文件，启用本地搜索</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Local search</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure>

<h3 id="设置个人头像"><a href="#设置个人头像" class="headerlink" title="设置个人头像"></a>设置个人头像</h3><p>主题配置文件中设置以下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Sidebar Avatar</span><br><span class="line">avatar:</span><br><span class="line">  # in theme directory(source&#x2F;images): &#x2F;images&#x2F;avatar.gif</span><br><span class="line">  # in site  directory(source&#x2F;uploads): &#x2F;uploads&#x2F;avatar.gif</span><br><span class="line">  # You can also use other linking images.</span><br><span class="line">  url: #&#x2F;images&#x2F;avatar.jpg</span><br><span class="line">  # If true, the avatar would be dispalyed in circle.</span><br><span class="line">  rounded: false</span><br><span class="line">  # The value of opacity should be choose from 0 to 1 to set the opacity of the avatar.</span><br><span class="line">  opacity: 1</span><br><span class="line">  # If true, the avatar would be rotated with the cursor.</span><br><span class="line">  rotated: false</span><br></pre></td></tr></table></figure>

<h2 id="设置站点建立时间"><a href="#设置站点建立时间" class="headerlink" title="设置站点建立时间"></a>设置站点建立时间</h2><p>主题配置文件中搜索“since”并修改值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">since: 2020</span><br></pre></td></tr></table></figure>

<h2 id="设置网站图标"><a href="#设置网站图标" class="headerlink" title="设置网站图标"></a>设置网站图标</h2><p>在 <a href="http://www.easyicon.net/" target="_blank" rel="noopener">EasyIcon</a> 中找一张（32*32）的 ico 图标，或者去别的网站下载或者制作，并将图标名称改为<code>favicon.ico</code>，然后把图标放在 <code>/themes/next/source/images</code> 里，并且修改主题配置文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Put your favicon.ico into &#96;hexo-site&#x2F;source&#x2F;&#96; directory.</span><br><span class="line">favicon: &#x2F;favicon.ico</span><br></pre></td></tr></table></figure>

<h2 id="网站底部字数统计"><a href="#网站底部字数统计" class="headerlink" title="网站底部字数统计"></a>网站底部字数统计</h2><p>切换到根目录下，运行如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Copynpm install hexo-wordcount --save</span><br></pre></td></tr></table></figure>

<p>然后在 <code>/themes/next/layout/_partials/footer.swig</code> 文件尾部加上：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Copy&lt;div class&#x3D;&quot;theme-info&quot;&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;powered-by&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;span class&#x3D;&quot;post-count&quot;&gt;博客全站共&#123;&#123; totalcount(site) &#125;&#125;字&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<h2 id="显示中文"><a href="#显示中文" class="headerlink" title="显示中文"></a>显示中文</h2><p>站点配置文件中修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">language: zh-CN</span><br></pre></td></tr></table></figure>

<h2 id="添加访问统计"><a href="#添加访问统计" class="headerlink" title="添加访问统计"></a>添加访问统计</h2><p>主题访问配置修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">busuanzi_count:</span><br><span class="line">  enable: true</span><br><span class="line">  total_visitors: true</span><br><span class="line">  total_visitors_icon: user</span><br><span class="line">  total_views: true</span><br><span class="line">  total_views_icon: eye</span><br><span class="line">  post_views: true</span><br><span class="line">  post_views_icon: eye</span><br></pre></td></tr></table></figure>

<h2 id="侧边栏相关设置"><a href="#侧边栏相关设置" class="headerlink" title="侧边栏相关设置"></a>侧边栏相关设置</h2><p>主题配置文件搜索“sidebar”</p>
<h2 id="首页显示文章摘要"><a href="#首页显示文章摘要" class="headerlink" title="首页显示文章摘要"></a>首页显示文章摘要</h2><p>通过Hexo提供的方式，手动添加&lt;!– more –&gt; 进行分割</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">摘要摘要</span><br><span class="line">&lt;!-- more --&gt; </span><br><span class="line">详细内容</span><br></pre></td></tr></table></figure>

<h2 id="集成gitalk评论系统"><a href="#集成gitalk评论系统" class="headerlink" title="集成gitalk评论系统"></a>集成gitalk评论系统</h2><p>最新的NexT主题只需在站点配置文件下进行配置</p>
<ol>
<li><a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">在github上注册应用</a></li>
</ol>
<p><img src="/images/hexo_next_config/%E5%88%9B%E5%BB%BAgithub%E5%BA%94%E7%94%A8.png" alt="注册github应用"></p>
<ol start="2">
<li>主题配置文件中找到gitalk</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gitalk:</span><br><span class="line">  enable: true #开启</span><br><span class="line">  github_id: github的id # GitHub repo owner</span><br><span class="line">  repo: 用于存放评论的仓库名，可以新建一个仓库 # Repository name to store issues</span><br><span class="line">  client_id: 刚才注册完提供的 # GitHub Application Client ID</span><br><span class="line">  client_secret: 刚才注册完提供的 # GitHub Application Client Secret</span><br><span class="line">  admin_user: github的用户名 # GitHub repo owner and collaborators, only these guys can initialize gitHub issues</span><br><span class="line">  distraction_free_mode: true # Facebook-like distraction free mode</span><br><span class="line">  # Gitalk&#39;s display language depends on user&#39;s browser or system environment</span><br><span class="line">  # If you want everyone visiting your site to see a uniform language, you can set a force language value</span><br><span class="line">  # Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span><br><span class="line">  language: zh-CN #中文</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>重新生成部署</li>
</ol>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub+Hexo搭建个人博客</title>
    <url>/2020/01/20/GitHub+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>最近花了一些时间使用GitHub+Hexo搭建了自己的博客，在这边进行一个记录。（这边默认大家已经有了github账号和git环境）</p>
<a id="more"></a> 

<h2 id="创建github仓库"><a href="#创建github仓库" class="headerlink" title="创建github仓库"></a>创建github仓库</h2><ol>
<li><p>仓库名为”用户名.github.io”</p>
</li>
<li><p>设置为public，private的别人就访问不到啦</p>
</li>
<li><p>勾选README</p>
</li>
</ol>
<p><img src="/images/hexo_make_blog/%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2%E4%BB%93%E5%BA%93.png" alt="创建博客仓库"></p>
<h2 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h2><p><a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">nodejs下载地址</a></p>
<p>1.检验npm是否安装成功，执行以下命令，有输出版本号即为成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure>

<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><ol>
<li>新建一个文件夹专门放blog文件，我们取名为MyBlog</li>
<li>进入Myblog，右键Git Bash here</li>
<li>使用npm安装Hexo</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>初始化博客，此时会新增一个blog文件夹</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>检验Hexo是否可用，进入blog文件夹输入以下命令，后在浏览器中输入localhost:4000即可看到测试博文</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new 测试文章 <span class="comment">#新建一篇文章</span></span><br><span class="line">hexo g <span class="comment">#生成</span></span><br><span class="line">hexo s <span class="comment">#启动本地服务</span></span><br></pre></td></tr></table></figure>

<h2 id="关联github"><a href="#关联github" class="headerlink" title="关联github"></a>关联github</h2><ol>
<li>“\MyBlog\blog”下的_config.yml称为“站点配置文件”</li>
<li>站点配置文件中修改配置</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;vicedev&#x2F;vicedev.github.io.git #刚才建的仓库地址</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>安装github部署插件</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>部署到github</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean <span class="comment">#清除缓存，若是网页正常情况下可以忽略这条命令</span></span><br><span class="line">hexo g <span class="comment">#生成</span></span><br><span class="line">hexo d <span class="comment">#部署</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>此时打开”用户名.github.io”即可看到博客</li>
</ol>
<h2 id="使用自己的域名"><a href="#使用自己的域名" class="headerlink" title="使用自己的域名"></a>使用自己的域名</h2><ol>
<li>以阿里云为例，购买域名后进入控制台</li>
<li>域名状态可能需要实名下，点击解析</li>
</ol>
<p><img src="/images/hexo_make_blog/%E9%98%BF%E9%87%8C%E4%BA%91%E6%8E%A7%E5%88%B6%E5%8F%B01.png" alt="阿里云控制台1"></p>
<ol start="3">
<li>点击添加记录，设置可参照我的这两条，其中ip地址可通过ping”用户名.github.io”获取</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ping vicedev.github.io</span><br></pre></td></tr></table></figure>

<p><img src="/images/hexo_make_blog/%E9%98%BF%E9%87%8C%E4%BA%91%E6%8E%A7%E5%88%B6%E5%8F%B02.png" alt="添加记录"></p>
<ol start="4">
<li>在“\MyBlog\blog\source”下新建名为“CNAME”的文件（注意不要有后缀名），里面写入你的域名地址</li>
<li>重新生成部署到github</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g <span class="comment">#生成</span></span><br><span class="line">hexo d <span class="comment">#部署</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li>现在可以通过你的域名访问啦，可能生效时间没那么快需要再等会</li>
</ol>
<h2 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h2><ol>
<li>生成新文章，文件目录在“\MyBlog\blog\source_posts\文章题目.md”</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new 文章题目</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>添加图片，可把图片放在“\MyBlog\blog\source\images”，markdown中通过”/images/xx.png”引用</li>
<li>写完后通过执行生成和部署命令即可部署到github</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g <span class="comment">#生成</span></span><br><span class="line">hexo d <span class="comment">#部署</span></span><br></pre></td></tr></table></figure>

<h2 id="换成blog-xx-xx的域名"><a href="#换成blog-xx-xx的域名" class="headerlink" title="换成blog.xx.xx的域名"></a>换成blog.xx.xx的域名</h2><ol>
<li>其实与上面绑定域名一致，可以把上面的设置进行修改</li>
</ol>
<p><img src="/images/hexo_make_blog/%E9%98%BF%E9%87%8C%E4%BA%91%E6%8E%A7%E5%88%B6%E5%8F%B03.png" alt="blog域名"></p>
<ol start="2">
<li>把“\MyBlog\blog\source”下的CNAME文件中的域名改为blog.xx.xx(示例：blog.vicedev.cn)</li>
<li>重新生成部署即可通过blog.xx.xx访问</li>
</ol>
<h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><ol>
<li><a href="https://hexo.io/themes/" target="_blank" rel="noopener">主题网站</a></li>
<li>clone相关主题到“\MyBlog\blog\themes”目录下</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>修改站点配置文件，theme后为主题名（NexT主题的相关配置可参考<a href="/2020/01/20/NexT%E4%B8%BB%E9%A2%98%E7%9B%B8%E5%85%B3%E8%AE%BE%E7%BD%AE/" title="NexT主题相关设置">NexT主题相关设置</a>）</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>重新生成部署即可</li>
</ol>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
